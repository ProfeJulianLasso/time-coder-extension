/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/index.tsx

import React, { StrictMode } from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { DailySummary, WeeklySummary } from "./types/interfaces";

declare global {
  interface Window {
    vscode: any;
    dailyData: DailySummary;
    weeklyData: WeeklySummary;
  }
}

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);

root.render(
  <StrictMode>
    <App
      dailyData={
        window.dailyData ?? {
          totalDurationInSeconds: 0,
          byLanguage: [],
          byPlatform: [],
        }
      }
      weeklyData={
        window.weeklyData ?? {
          totalDurationInSeconds: 0,
          dailyDurationInSeconds: [],
          byLanguage: [],
          byPlatform: [],
        }
      }
    />
  </StrictMode>
);

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/App.tsx

import React, { FC } from "react";
import DevTimerReport from "./components/dev-timer-report/DevTimerReport";
import "./styles/Globals.css";
import { DailySummary, WeeklySummary } from "./types/interfaces";

interface AppProps {
  dailyData: DailySummary;
  weeklyData: WeeklySummary;
}

const App: FC<AppProps> = ({ dailyData, weeklyData }) => {
  return (
    <div className="devtimer-app">
      <h1 className="title">Reporte de Actividades</h1>
      <DevTimerReport dailyData={dailyData} weeklyData={weeklyData} />
    </div>
  );
};

export default App;

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/components/dev-timer-report/DevTimerReport.tsx

import React, { FC, useState } from "react";
import { DailySummary, WeeklySummary } from "../../types/interfaces";
import DailyReport from "../daily-report/DailyReport";
import TabNavigation from "../tab-navigation/TabNavigation";
import WeeklyReport from "../weekly-report/WeeklyReport";
import "./DevTimerReport.css";

interface DevTimerReportProps {
  dailyData: DailySummary;
  weeklyData: WeeklySummary;
}

const DevTimerReport: FC<DevTimerReportProps> = ({ dailyData, weeklyData }) => {
  const [activeTab, setActiveTab] = useState<"daily" | "weekly">("daily");

  const handleRefresh = () => {
    console.log("Refreshing data...", window.vscode);
    if (window.vscode) {
      window.vscode.postMessage({
        command: "refresh",
      });
    }
  };

  const tabs = [
    { id: "daily", label: "Reporte Diario" },
    { id: "weekly", label: "Reporte Semanal" },
  ];

  return (
    <div className="report-container">
      <TabNavigation
        tabs={tabs}
        activeTab={activeTab}
        onTabChange={(tabId) => setActiveTab(tabId as "daily" | "weekly")}
      />

      <div className="tab-content">
        {activeTab === "daily" ? (
          <DailyReport dailyData={dailyData} />
        ) : (
          <WeeklyReport weeklyData={weeklyData} />
        )}
      </div>

      <div className="button-container">
        <button onClick={handleRefresh} className="vscode-button">
          Actualizar
        </button>
      </div>
    </div>
  );
};

export default DevTimerReport;

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/components/dev-timer-report/DevTimerReport.css

.vscode-button {
  background-color: var(--vscode-button-background);
  color: var(--vscode-button-foreground);
  border: none;
  padding: 6px 14px;
  border-radius: 2px;
  cursor: pointer;
  font-family: var(--vscode-font-family);
  font-size: var(--vscode-font-size);
  font-weight: var(--vscode-font-weight);
  transition: background-color 0.2s ease;
}

.vscode-button:hover {
  background-color: var(--vscode-button-hoverBackground);
}

.report-container {
  padding: 16px;
  background-color: var(--vscode-editor-background);
  color: var(--vscode-editor-foreground);
}

.tab-content {
  margin-top: 0px;
}

.button-container {
  display: flex;
  justify-content: flex-end;
  margin-top: 0;
}

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/components/tab-navigation/TabNavigation.tsx

import React, { FC } from "react";
import "./TabNavigation.css";

interface Tab {
  id: string;
  label: string;
}

interface TabNavigationProps {
  tabs: Tab[];
  activeTab: string;
  onTabChange: (tabId: string) => void;
}

const TabNavigation: FC<TabNavigationProps> = ({
  tabs,
  activeTab,
  onTabChange,
}) => {
  return (
    <div className="tab-navigation">
      {tabs.map((tab) => (
        <button
          key={tab.id}
          className={`tab-button ${activeTab === tab.id ? "active" : ""}`}
          onClick={() => onTabChange(tab.id)}
        >
          {tab.label}
        </button>
      ))}
    </div>
  );
};

export default TabNavigation;

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/components/tab-navigation/TabNavigation.css

.tab-navigation {
  display: flex;
  border-bottom: 1px solid var(--vscode-panel-border);
  margin-bottom: 8px;
  width: 100%;
}

.tab-button {
  background: transparent;
  border: none;
  padding: 8px 16px;
  cursor: pointer;
  color: var(--vscode-foreground);
  font-family: var(--vscode-font-family);
  font-size: var(--vscode-font-size);
  position: relative;
  flex: 1;
  text-align: center;
  margin-right: 0;
}

.tab-button.active {
  color: var(--vscode-textLink-foreground);
}

.tab-button.active::after {
  content: "";
  position: absolute;
  bottom: -1px;
  left: 0;
  right: 0;
  height: 2px;
  background-color: var(--vscode-textLink-foreground);
}

.tab-button:hover:not(.active) {
  color: var(--vscode-textLink-activeForeground);
}

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/components/daily-report/DailyReport.tsx

import React, { FC } from "react";
import { DailySummary } from "../../types/interfaces";
import { formatDuration } from "../../utils/time";
import ActivityTypeReport from "./ActivityTypeReport";
import "./DailyReport.css";
import LanguageActivityReport from "./LanguageActivityReport";

interface DailyReportProps {
  dailyData: DailySummary;
}

const DailyReport: FC<DailyReportProps> = ({ dailyData }) => {
  return (
    <>
      <div className="daily-report">
        <h2>Resumen diario</h2>
        <div className="summary-info">
          <div className="total">
            Tiempo Total:{" "}
            <span className="highlight-value">
              {formatDuration(dailyData.totalDurationInSeconds)}
            </span>
          </div>
          <div className="total">
            Lenguaje m√°s usado:{" "}
            <span className="highlight-value">
              {dailyData.byLanguage[0]?.language || "N/A"}
            </span>
          </div>
        </div>
      </div>
      <ActivityTypeReport dailyData={dailyData} />
      <LanguageActivityReport dailyData={dailyData} />
    </>
  );
};

export default DailyReport;

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/components/daily-report/DailyReport.css

.daily-report {
  padding: 10px 0;
  border-bottom: 1px solid var(--vscode-panel-border);
}

.daily-report:last-child {
  margin-bottom: 16px;
}

.summary-info {
  margin-top: 8px;
}

.total {
  font-size: var(--vscode-font-size);
  margin-bottom: 8px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.highlight-value {
  color: var(--vscode-textLink-foreground);
  font-size: 1.1em;
  font-weight: 900;
}

h2 {
  margin-top: 0;
  color: var(--vscode-editor-foreground);
  font-weight: 600;
  font-size: 1.2em;
}

/* Nuevos estilos para la barra de actividades */
.activity-bar-container {
  margin: 15px 0;
}

.activity-bar {
  height: 8px;
  width: 100%;
  border-radius: 10px;
  overflow: hidden;
  display: flex;
}

.activity-coding {
  height: 100%;
  background-color: #4caf50; /* Verde */
  transition: width 0.5s ease;
}

.activity-debug {
  height: 100%;
  background-color: #ff7e08; /* Naranja */
  transition: width 0.5s ease;
}

.activity-legend {
  margin-top: 10px;
}

.legend-item {
  display: flex;
  align-items: center;
  margin-bottom: 6px;
}

.legend-color {
  width: 14px;
  height: 14px;
  display: inline-block;
  border-radius: 3px;
  margin-right: 8px;
}

.coding-color {
  background-color: #4caf50; /* Verde */
}

.debug-color {
  background-color: #ff9800; /* Naranja */
}

.legend-label {
  margin-right: 5px;
}

/* Estilos para la actividad por lenguaje */
.language-bars {
  margin-top: 15px;
}

.language-bar-item {
  margin-bottom: 12px;
}

.language-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 4px;
}

.language-name {
  font-size: var(--vscode-font-size);
}

.language-progress-bar {
  height: 8px;
  width: 100%;
  background-color: var(--vscode-progressBar-background);
  border-radius: 4px;
  overflow: hidden;
}

.language-progress {
  height: 100%;
  transition: width 0.5s ease;
  border-radius: 4px;
}

.no-data-message {
  padding: 15px 0;
  font-style: italic;
  color: var(--vscode-descriptionForeground);
}

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/components/daily-report/ActivityTypeReport.tsx

import React, { FC, useMemo } from "react";
import { DailySummary } from "../../types/interfaces";
import { formatDuration } from "../../utils/time";
import "./DailyReport.css";

interface ActivityTypeReportProps {
  dailyData: DailySummary;
}

const ActivityTypeReport: FC<ActivityTypeReportProps> = ({ dailyData }) => {
  const { debugTime, codingTime, totalTime } = useMemo(() => {
    let totalDebugTime = 0;

    dailyData.byPlatform.forEach((platform) => {
      platform.projects.forEach((project) => {
        totalDebugTime += project.debug.durationInSeconds;
      });
    });

    const total = dailyData.totalDurationInSeconds;
    const coding = total - totalDebugTime;

    return {
      debugTime: totalDebugTime,
      codingTime: coding,
      totalTime: total,
    };
  }, [dailyData]);

  const codingPercentage = Math.round((codingTime / totalTime) * 100);
  const debugPercentage = 100 - codingPercentage;

  return (
    <div className="daily-report">
      <h2>Tipo de actividad</h2>

      <div className="activity-bar-container">
        <div className="activity-bar">
          <div
            className="activity-coding"
            style={{ width: `${codingPercentage}%` }}
            title={`Codificaci√≥n: ${formatDuration(
              codingTime
            )} (${codingPercentage}%)`}
          ></div>
          <div
            className="activity-debug"
            style={{ width: `${debugPercentage}%` }}
            title={`Depuraci√≥n: ${formatDuration(
              debugTime
            )} (${debugPercentage}%)`}
          ></div>
        </div>
      </div>

      <div className="activity-legend">
        <div className="legend-item">
          <span className="legend-color coding-color"></span>
          <span className="legend-label">Codificaci√≥n: </span>
          <span className="highlight-value">
            {formatDuration(codingTime)} ({codingPercentage}%)
          </span>
        </div>
        <div className="legend-item">
          <span className="legend-color debug-color"></span>
          <span className="legend-label">Depuraci√≥n: </span>
          <span className="highlight-value">
            {formatDuration(debugTime)} ({debugPercentage}%)
          </span>
        </div>
      </div>
    </div>
  );
};

export default ActivityTypeReport;

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/components/daily-report/LanguageActivityReport.tsx

import React, { FC } from "react";
import { DailySummary } from "../../types/interfaces";
import {
  calculatePercentage,
  formatDuration,
  getColorByIndex,
} from "../../utils/time";
import "./DailyReport.css";

interface LanguageActivityReportProps {
  dailyData: DailySummary;
}

const LanguageActivityReport: FC<LanguageActivityReportProps> = ({
  dailyData,
}) => {
  // Usar siempre los datos reales de dailyData
  const languages = dailyData.byLanguage || [];

  // Ordenar lenguajes por tiempo (de mayor a menor)
  const sortedLanguages = [...languages].sort(
    (a, b) => b.durationInSeconds - a.durationInSeconds
  );

  // Calcular total de tiempo
  const totalTime = languages.reduce(
    (sum, lang) => sum + lang.durationInSeconds,
    0
  );

  return (
    <div className="daily-report">
      <h2>Actividad por lenguaje</h2>

      {sortedLanguages.length > 0 ? (
        <div className="language-bars">
          {sortedLanguages.map((lang, index) => {
            const percentage = calculatePercentage(
              lang.durationInSeconds,
              totalTime
            );
            return (
              <div key={lang.language} className="language-bar-item">
                <div className="language-header">
                  <div className="language-name">{lang.language}</div>
                  <div className="highlight-value">
                    {formatDuration(lang.durationInSeconds)} ({percentage}%)
                  </div>
                </div>
                <div className="language-progress-bar">
                  <div
                    className="language-progress"
                    style={{
                      width: `${percentage}%`,
                      backgroundColor: getColorByIndex(
                        index,
                        sortedLanguages.length - 1
                      ),
                    }}
                    title={`${lang.language}: ${formatDuration(
                      lang.durationInSeconds
                    )} (${percentage}%)`}
                  ></div>
                </div>
              </div>
            );
          })}
        </div>
      ) : (
        <div className="no-data-message">
          No hay datos de lenguajes disponibles
        </div>
      )}
    </div>
  );
};

export default LanguageActivityReport;

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/components/weekly-report/WeeklyReport.tsx

import React, { FC } from "react";
import { WeeklySummary } from "../../types/interfaces";
import { formatDuration, getColorByIndex } from "../../utils/time";
import "./WeeklyReport.css";

interface WeeklyReportProps {
  weeklyData: WeeklySummary;
}

/**
 * Obtiene el nombre del d√≠a de la semana a partir de una fecha
 * @param dateString - Fecha en formato string
 * @returns Nombre del d√≠a en espa√±ol
 */
const getDayName = (dateString: string): string => {
  const date = new Date(dateString);
  const days = [
    "Lunes",
    "Martes",
    "Mi√©rcoles",
    "Jueves",
    "Viernes",
    "S√°bado",
    "Domingo",
  ];
  return days[date.getDay()];
};

const WeeklyReport: FC<WeeklyReportProps> = ({ weeklyData }) => {
  // Ordenar los datos diarios por fecha
  const sortedDailyData = [...weeklyData.dailyDurationInSeconds].sort(
    (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()
  );

  // Ordenar lenguajes por tiempo
  const sortedLanguages = [...weeklyData.byLanguage].sort(
    (a, b) => b.durationInSeconds - a.durationInSeconds
  );

  // Encontrar el m√°ximo tiempo diario para escalar las barras
  const maxDailyTime = Math.max(
    ...sortedDailyData.map((day) => day.durationInSeconds),
    1
  );

  return (
    <div className="weekly-report">
      <h2>Resumen semanal</h2>

      <div className="summary-info">
        <div className="total">
          <span>Total de la semana: </span>
          <span className="highlight-value">
            {formatDuration(weeklyData.totalDurationInSeconds)}
          </span>
        </div>

        {weeklyData.byLanguage.length > 0 && (
          <div className="total">
            <span>Lenguaje m√°s usado: </span>
            <span className="highlight-value">
              {weeklyData.byLanguage[0]?.language || "N/A"}
            </span>
          </div>
        )}
      </div>

      {sortedDailyData.length > 0 && (
        <div className="daily-activity-section">
          <h2>Actividad diaria</h2>
          <div className="daily-bars">
            {sortedDailyData.map((day, index) => {
              const barHeight = (day.durationInSeconds / maxDailyTime) * 100;
              const displayDate = new Date(day.date).toLocaleDateString(
                "es-ES",
                {
                  day: "2-digit",
                  month: "2-digit",
                }
              );

              return (
                <div key={day.date} className="daily-bar-container">
                  <div className="bar-label">
                    {formatDuration(day.durationInSeconds)}
                  </div>
                  <div className="bar-wrapper">
                    <div
                      className="daily-bar"
                      style={{
                        height: `${barHeight}%`,
                        backgroundColor: getColorByIndex(
                          index,
                          sortedDailyData.length - 1
                        ),
                      }}
                      title={`${getDayName(day.date)}: ${formatDuration(
                        day.durationInSeconds
                      )}`}
                    ></div>
                  </div>
                  <div className="day-label">
                    {getDayName(day.date).substring(0, 3)}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {sortedLanguages.length > 0 && (
        <div className="languages-section">
          <h2>Lenguajes de la semana</h2>
          <div className="top-languages">
            {sortedLanguages.slice(0, 5).map((lang, index) => (
              <div key={lang.language} className="language-item">
                <div className="language-name">{lang.language}</div>
                <div className="language-time">
                  {formatDuration(lang.durationInSeconds)}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default WeeklyReport;

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/components/weekly-report/WeeklyReport.css

.weekly-report {
  padding: 10px 0;
}

.summary-info {
  margin-top: 8px;
  margin-bottom: 16px;
}

.total {
  font-size: var(--vscode-font-size);
  margin-bottom: 8px;
  display: flex;
  justify-content: space-between;
}

h2,
h3 {
  margin-top: 0;
  color: var(--vscode-editor-foreground);
  font-weight: 600;
}

h2 {
  font-size: 1.2em;
}

h3 {
  font-size: 1.1em;
  margin-top: 16px;
  margin-bottom: 10px;
}

.highlight-value {
  color: var(--vscode-textLink-foreground);
  font-size: 1.1em;
  font-weight: 900;
}

.daily-activity-section {
  margin-top: 20px;
  border-top: 1px solid var(--vscode-panel-border);
  padding-top: 16px;
}

.daily-bars {
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  height: 180px;
  margin-top: 16px;
}

.daily-bar-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  flex: 1;
  height: 100%;
  margin-right: 8px;
}

.bar-wrapper {
  display: flex;
  align-items: flex-end;
  height: 100%;
  width: 100%;
}

.bar-label {
  font-size: 0.8em;
  margin-bottom: 5px;
  white-space: nowrap;
}

.daily-bar {
  width: 100%;
  border-radius: 4px 4px 0 0;
  min-height: 2px;
  transition: height 0.3s ease;
}

.day-label {
  margin-top: 5px;
  font-size: 0.9em;
}

.languages-section {
  margin-top: 20px;
  border-top: 1px solid var(--vscode-panel-border);
  padding-top: 16px;
}

.top-languages {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-top: 15px;
}

.language-item {
  display: flex;
  justify-content: space-between;
  padding: 8px 0;
  border-bottom: 1px solid #eee;
  border-radius: 4px;
  background-color: var(--vscode-editor-selectionBackground);
}

.language-name {
  font-weight: 500;
}

.language-time {
  color: #666;
}

.no-data-message {
  padding: 15px 0;
  font-style: italic;
  color: var(--vscode-descriptionForeground);
}

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/types/interfaces.ts

export interface DebugSummary {
  durationInSeconds: number;
}

export interface LanguageSummary {
  language: string;
  durationInSeconds: number;
}

export interface BranchSummary {
  branch: string;
  durationInSeconds: number;
  debug: DebugSummary;
}

export interface PlatformSummary {
  platform: string;
  machine: string;
  durationInSeconds: number;
  projects: ProjectSummary[];
}

export interface ProjectSummary {
  project: string;
  durationInSeconds: number;
  debug: DebugSummary;
  branches: BranchSummary[];
}

export interface DailySummary {
  totalDurationInSeconds: number;
  byLanguage: LanguageSummary[];
  byPlatform: PlatformSummary[];
}

export interface DailyHoursSummary {
  date: string;
  durationInSeconds: number;
}

export interface WeeklySummary {
  totalDurationInSeconds: number;
  dailyDurationInSeconds: DailyHoursSummary[];
  byLanguage: LanguageSummary[];
  byPlatform: PlatformSummary[];
}

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/styles/Globals.css

.title {
  margin-bottom: 0;
}

/home/julian-lasso/Proyectos/sofka/time-coder-extension/react-app/src/utils/time.ts

/**
 * Convierte una duraci√≥n en segundos a formato legible "Xh Ym"
 * @param seconds - N√∫mero de segundos a convertir
 * @returns Cadena formateada en formato "Xh Ym"
 */
export const formatDuration = (seconds: number): string => {
  if (!seconds && seconds !== 0) {
    return "0h 0m";
  }

  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);

  return `${hours}h ${minutes}m`;
};

/**
 * Calcula el porcentaje que representa una parte del total
 * @param part - Valor parcial
 * @param total - Valor total
 * @returns Porcentaje redondeado
 */
export const calculatePercentage = (part: number, total: number): number => {
  if (total === 0) return 0;
  return Math.round((part / total) * 100);
};

/**
 * Obtiene un color en formato HSL basado en un √≠ndice
 * @param index - Posici√≥n en la lista
 * @param total - Total de elementos
 * @returns Color en formato HSL
 */
export const getColorByIndex = (index: number, total: number): string => {
  const baseHue = 210;
  const saturation = 80 - (index / Math.max(1, total)) * 40; // 80% a 40%
  const lightness = 45 + (index / Math.max(1, total)) * 25; // 45% a 70%

  return `hsl(${baseHue}, ${saturation}%, ${lightness}%)`;
};

